import React from "react";
import styles from "./index.module.sass";
import { Link } from "react-router-dom";

const METHODS = ["WhatsApp", "Telegram", "–ó–≤–æ–Ω–æ–∫", "SMS", "Email"];

// ‚ö†Ô∏è –¢–æ–∫–µ–Ω/—á–∞—Ç –≤–∏–¥–Ω—ã –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞ –≤—ã–Ω–µ—Å–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä/—Å–µ—Ä–≤–µ—Ä–ª–µ—Å)
const BOT_TOKEN = "8485434309:AAGnR6UhiacbSD_Q-k0u_viInqNETIX0vOE";
const CHAT_ID = "773413595";
const API_URL = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;

const ContactForm = ({ img }) => {
  const [form, setForm] = React.useState({
    name: "",
    phone: "", // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—é–¥–∞ –ø—Ä–∏ blur (—Å–º. –Ω–∏–∂–µ)
    method: METHODS[0],
    agree: false,
  });
  const [touched, setTouched] = React.useState({});
  const [loading, setLoading] = React.useState(false);

  // —Ç–µ–ª–µ—Ñ–æ–Ω —á–µ—Ä–µ–∑ ref, —á—Ç–æ–±—ã jQuery-–º–∞—Å–∫–∞ –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª–∞ —Å React
  const phoneRef = React.useRef(null);
  const [phoneComplete, setPhoneComplete] = React.useState(false);

  // –∑–∞–≥—Ä—É–∑–∫–∞ jQuery + maskedinput —Å —Ç–≤–æ–∏—Ö —Å—Å—ã–ª–æ–∫
  React.useEffect(() => {
    const loadScript = (src) =>
      new Promise((resolve) => {
        const script = document.createElement("script");
        script.src = src;
        script.async = true;
        script.onload = resolve;
        document.body.appendChild(script);
      });

    (async () => {
      if (!window.jQuery) {
        await loadScript("https://snipp.ru/cdn/jquery/2.1.1/jquery.min.js");
      }
      await loadScript(
        "https://snipp.ru/cdn/maskedinput/jquery.maskedinput.min.js"
      );

      const $ = window.$;
      if ($ && $.mask && phoneRef.current) {
        $.mask.definitions["h"] = "[0|1|3|4|5|6|7|9]";
        $(phoneRef.current).mask("+7 (h99) 999-99-99", {
          completed: function () {
            setPhoneComplete(true);
            // —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º ¬´–≥–æ—Ç–æ–≤–æ–µ¬ª –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç–µ–π—Ç
            setForm((s) => ({ ...s, phone: this.value }));
          },
        });

        // –ø—Ä–∏ –ª—é–±–æ–º –≤–≤–æ–¥–µ/—Å—Ç–∏—Ä–∞–Ω–∏–∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏
        $(phoneRef.current).on("input", function () {
          const v = this.value || "";
          const done = v.indexOf("_") === -1 && /\d/.test(v);
          setPhoneComplete(done);
        });
      }
    })();
  }, []);

  const onChange = (e) => {
    const { name, value, type, checked } = e.target;
    setForm((s) => ({ ...s, [name]: type === "checkbox" ? checked : value }));
  };

  const onBlur = (e) => {
    setTouched((t) => ({ ...t, [e.target.name]: true }));
    if (e.target.name === "phone") {
      // –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ input –≤ —Å—Ç–µ–π—Ç
      setForm((s) => ({ ...s, phone: e.target.value }));
    }
  };

  // –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  const nameValid = form.name.trim().length >= 2;

  // –±–µ—Ä—ë–º ¬´–∂–∏–≤–æ–µ¬ª –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ ref (—Å–∞–º–æ–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ)
  const phoneRaw = phoneRef.current?.value || form.phone || "";
  const digits = phoneRaw.replace(/\D/g, "");
  const phoneValid = phoneComplete && /^7\d{10}$/.test(digits);

  const canSubmit = nameValid && phoneValid && form.agree;

  // –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
  const submit = async (e) => {
    e.preventDefault();
    setTouched({ name: true, phone: true, agree: true });

    if (!canSubmit) return;

    const message = `üì© *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ WAYCATERING*
üë§ –ò–º—è: ${form.name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phoneRaw}
üí¨ –°–ø–æ—Å–æ–± —Å–≤—è–∑–∏: ${form.method}
‚úÖ –°–æ–≥–ª–∞—Å–∏–µ: ${form.agree ? "–î–∞" : "–ù–µ—Ç"}`;

    try {
      setLoading(true);
      const res = await fetch(API_URL, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          chat_id: CHAT_ID,
          text: message,
          parse_mode: "Markdown",
        }),
      });

      const ok = res.ok;
      if (ok) {
        alert("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚úÖ");
        // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∏ —Ñ–ª–∞–≥–∏
        setForm({ name: "", phone: "", method: METHODS[0], agree: false });
        setPhoneComplete(false);
        if (phoneRef.current) phoneRef.current.value = "";
      } else {
        const data = await res.json().catch(() => ({}));
        alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram üò¢ ${data?.description || ""}`);
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞:", err);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className={styles.contacts}>
      <div className="wrapper">
        <div className={styles.div}>
          {img && <img className={styles.img} src={img} alt="" />}
          <div className={styles.div2}>
            <h1 className={styles.contacts_title}>
              –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏! –†–∞–¥—ã –±—É–¥–µ–º –≤–∞–º –ø–æ–º–æ—á—å.
            </h1>

            <form className={styles.form} onSubmit={submit} noValidate>
              {/* –ò–º—è */}
              <label className={styles.label}>
                –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è
                <input
                  className={`${styles.input} ${
                    touched.name && !nameValid ? styles.error : ""
                  }`}
                  type="text"
                  name="name"
                  placeholder="–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è"
                  value={form.name}
                  onChange={onChange}
                  onBlur={onBlur}
                  autoComplete="name"
                />
                {touched.name && !nameValid && (
                  <span className={styles.hint}>–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞</span>
                )}
              </label>

              {/* –¢–µ–ª–µ—Ñ–æ–Ω —Å jQuery-–º–∞—Å–∫–æ–π —á–µ—Ä–µ–∑ ref (–±–µ–∑ value/onChange) */}
              <label className={styles.label}>
                –ù–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏
                <input
                  ref={phoneRef}
                  className={`${styles.input} ${
                    touched.phone && !phoneValid ? styles.error : ""
                  }`}
                  type="tel"
                  name="phone"
                  placeholder="+7 (___) ___-__-__"
                  inputMode="tel"
                  autoComplete="tel"
                  onBlur={onBlur}
                />
                {touched.phone && !phoneValid && (
                  <span className={styles.hint}>
                    –§–æ—Ä–º–∞—Ç: +7 (999) 123-45-67
                  </span>
                )}
              </label>

              {/* –ú–µ—Ç–æ–¥ —Å–≤—è–∑–∏ */}
              <label className={styles.label}>
                –°–ø–æ—Å–æ–± —Å–≤—è–∑–∏
                <div className={styles.selectWrap}>
                  <select
                    className={styles.select}
                    name="method"
                    value={form.method}
                    onChange={onChange}
                  >
                    {METHODS.map((m) => (
                      <option key={m} value={m}>
                        {m}
                      </option>
                    ))}
                  </select>
                  <span className={styles.chevron} aria-hidden>
                    ‚ñæ
                  </span>
                </div>
              </label>

              {/* –°–æ–≥–ª–∞—Å–∏–µ + –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Link (react-router-dom ‚Üí to) */}
              <label className={styles.agreeRow}>
                <input
                  type="checkbox"
                  name="agree"
                  checked={form.agree}
                  onChange={onChange}
                  onBlur={onBlur}
                />
                <span>
                  –Ø –ø—Ä–æ—á–∏—Ç–∞–ª(–∞) –∏ —Å–æ–≥–ª–∞—à–∞—é—Å—å —Å{" "}
                  <Link to="/privacy">–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</Link>
                </span>
              </label>

              <div className={styles.submitRow}>
                <button
                  className={styles.submit}
                  type="submit"
                  disabled={!canSubmit || loading}
                >
                  {loading ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"}
                </button>
              </div>

              {/* –æ—Ç–ª–∞–¥–∫–∞ ‚Äî –º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –≤–∫–ª—é—á–∏—Ç—å
              <pre style={{fontSize:12}}>
                {JSON.stringify({ nameValid, phoneValid, phoneComplete, canSubmit, phoneRaw }, null, 2)}
              </pre>
              */}
            </form>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ContactForm;
